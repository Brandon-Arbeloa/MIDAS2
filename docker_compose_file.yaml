# RAG System Docker Compose Configuration
# Windows 11 On-Premises Deployment

version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rag_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=rag_system
      - POSTGRES_USER=rag_user
      - POSTGRES_PASSWORD=rag_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d rag_system"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit Application (Development)
  streamlit_app:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: rag_streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=rag_user
      - POSTGRES_PASSWORD=rag_password
      - POSTGRES_DB=rag_system
    networks:
      - rag_network
    depends_on:
      - qdrant
      - redis
      - postgres
    restart: unless-stopped

  # Celery Worker for Background Processing
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: rag_celery_worker
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=rag_user
      - POSTGRES_PASSWORD=rag_password
      - POSTGRES_DB=rag_system
    networks:
      - rag_network
    depends_on:
      - redis
      - qdrant
      - postgres
    restart: unless-stopped
    command: celery -A src.core.celery_app worker --loglevel=info

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: rag_celery_beat
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - REDIS_HOST=redis
    networks:
      - rag_network
    depends_on:
      - redis
    restart: unless-stopped
    command: celery -A src.core.celery_app beat --loglevel=info

  # Flower - Celery Monitoring (Optional)
  flower:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: rag_flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    networks:
      - rag_network
    depends_on:
      - redis
    restart: unless-stopped
    command: celery -A src.core.celery_app flower --port=5555

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: rag_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - rag_network
    depends_on:
      - streamlit_app
    restart: unless-stopped
    profiles:
      - production

  # FastAPI Backend (Production Phase)
  fastapi_app:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: rag_fastapi
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=rag_user
      - POSTGRES_PASSWORD=rag_password
      - POSTGRES_DB=rag_system
    networks:
      - rag_network
    depends_on:
      - qdrant
      - redis
      - postgres
    restart: unless-stopped
    profiles:
      - production

networks:
  rag_network:
    driver: bridge

volumes:
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local